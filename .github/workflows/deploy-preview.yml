name: Deploy Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - 'feat/**'
      - 'release/**'

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build-ui:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: sofia_ui/pnpm-lock.yaml
          
      - name: Install dependencies
        run: |
          cd sofia_ui
          pnpm install --frozen-lockfile
          
      - name: Build UI
        run: |
          cd sofia_ui
          echo "VITE_API_URL=http://127.0.0.1:8023" > .env
          pnpm build
          
      - name: Upload UI artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'sofia_ui/dist'
          
  deploy-pages:
    needs: build-ui
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
  comment-preview-url:
    needs: deploy-pages
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const repoName = context.repo.repo;
            const owner = context.repo.owner;
            const previewUrl = `https://${owner}.github.io/${repoName}/`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner,
              repo: repoName,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('🚀 Preview deployed');
            });
            
            const body = `🚀 **Preview deployed!**
            
            📍 Preview URL: ${previewUrl}
            ⏰ Deployed at: ${new Date().toISOString()}
            🔄 Commit: ${context.sha.substring(0, 7)}
            
            ---
            💡 *This preview will be updated automatically with each push to this PR.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner,
                repo: repoName,
                comment_id: botComment.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo: repoName,
                issue_number: prNumber,
                body,
              });
            }