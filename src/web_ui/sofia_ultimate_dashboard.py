"""
Sofia V2 Ultimate Dashboard - Purple Template with Advanced Features
Combines the beautiful purple UI with all new AI/Trading capabilities
"""

import asyncio
import json
import logging
import os
import sys
import uuid
from typing import Dict

from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from src.adapters.web.fastapi_adapter import FastAPI, HTMLResponse, WebSocket, WebSocketDisconnect

sys.path.append(os.path.join(os.path.dirname(__file__), "..", ".."))
from src.data.real_time_fetcher import fetcher
from src.ml.real_time_predictor import prediction_engine
from src.scanner.advanced_market_scanner import market_scanner
from src.trading.paper_trading_engine import paper_engine
from src.trading.unified_execution_engine import execution_engine

logger = logging.getLogger(__name__)
app = FastAPI(title="Sofia V2 Ultimate Dashboard", version="2.0.0")
templates = Jinja2Templates(directory="src/web_ui/templates")
app.mount("/static", StaticFiles(directory="src/web_ui/static"), name="static")


class UltimateConnectionManager:
    """Enhanced WebSocket manager for ultimate dashboard"""

    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
        self.user_data: Dict[str, Dict] = {}

    async def connect(self, websocket: WebSocket, client_id: str, user_id: str = "demo"):
        await websocket.accept()
        self.active_connections[client_id] = websocket
        if user_id not in self.user_data:
            self.user_data[user_id] = {
                "portfolio": {"total_value": 100000, "daily_pnl": 0, "daily_pnl_percent": 0},
                "positions": [],
                "recent_trades": [],
                "ai_predictions": {},
                "scanner_signals": [],
                "market_data": {},
            }
        logger.info(f"Ultimate client {client_id} connected for user {user_id}")

    def disconnect(self, client_id: str):
        if client_id in self.active_connections:
            del self.active_connections[client_id]
        logger.info(f"Ultimate client {client_id} disconnected")

    async def broadcast_to_all(self, message: dict):
        """Broadcast to all connected clients"""
        disconnected = []
        for client_id, websocket in self.active_connections.items():
            try:
                await websocket.send_text(json.dumps(message))
            except Exception as e:
                logger.error(f"Error broadcasting to {client_id}: {e}")
                disconnected.append(client_id)
        for client_id in disconnected:
            self.disconnect(client_id)


ultimate_manager = UltimateConnectionManager()


@app.on_event("startup")
async def startup_ultimate():
    """Start all Sofia V2 engines for ultimate dashboard"""
    logger.info("Starting Sofia V2 Ultimate Dashboard...")
    await execution_engine.start()
    asyncio.create_task(broadcast_ultimate_data())
    logger.info("Sofia V2 Ultimate Dashboard fully operational! ðŸš€")


@app.on_event("shutdown")
async def shutdown_ultimate():
    """Cleanup on shutdown"""
    await execution_engine.stop()
    logger.info("Sofia V2 Ultimate Dashboard shutdown complete")


@app.get("/", response_class=HTMLResponse)
async def ultimate_dashboard():
    """Ultimate Sofia V2 dashboard with purple template"""
    return '\n    <!DOCTYPE html>\n    <html lang="en">\n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>Sofia V2 Ultimate - AI Trading Platform</title>\n\n        <!-- Tailwind CSS -->\n        <script src="https://cdn.tailwindcss.com"></script>\n        <script>\n            tailwind.config = {\n                darkMode: \'class\',\n                theme: {\n                    extend: {\n                        colors: {\n                            primary: \'#3b82f6\',\n                            secondary: \'#8b5cf6\',\n                            success: \'#10b981\',\n                            danger: \'#ef4444\',\n                            warning: \'#f59e0b\',\n                        },\n                        animation: {\n                            \'float\': \'float 6s ease-in-out infinite\',\n                            \'pulse-slow\': \'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite\',\n                            \'trade-flash\': \'tradeFlash 2s ease-in-out\',\n                            \'glow\': \'glow 2s ease-in-out infinite alternate\',\n                            \'particles\': \'particles 20s linear infinite\',\n                        }\n                    }\n                }\n            }\n        </script>\n\n        <!-- Chart.js -->\n        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>\n        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>\n        <!-- Alpine.js -->\n        <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>\n        <!-- Font Awesome -->\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n\n        <style>\n            @keyframes float {\n                0%, 100% { transform: translateY(0px) rotate(0deg); }\n                50% { transform: translateY(-20px) rotate(180deg); }\n            }\n\n            @keyframes tradeFlash {\n                0% { background-color: rgba(16, 185, 129, 0.2); }\n                50% { background-color: rgba(16, 185, 129, 0.5); }\n                100% { background-color: transparent; }\n            }\n\n            @keyframes glow {\n                from { box-shadow: 0 0 20px rgba(139, 92, 246, 0.3); }\n                to { box-shadow: 0 0 30px rgba(139, 92, 246, 0.6); }\n            }\n\n            @keyframes particles {\n                0% { transform: translateY(100vh) rotate(0deg); opacity: 0; }\n                10% { opacity: 1; }\n                90% { opacity: 1; }\n                100% { transform: translateY(-100vh) rotate(720deg); opacity: 0; }\n            }\n\n            .glass {\n                background: rgba(15, 23, 42, 0.4);\n                backdrop-filter: blur(16px);\n                border: 1px solid rgba(139, 92, 246, 0.2);\n            }\n\n            .glass-hover:hover {\n                background: rgba(15, 23, 42, 0.6);\n                border-color: rgba(139, 92, 246, 0.4);\n                transform: translateY(-4px) scale(1.02);\n                box-shadow: 0 20px 40px rgba(139, 92, 246, 0.2);\n            }\n\n            .gradient-border {\n                position: relative;\n                background: linear-gradient(135deg, #1e293b, #0f172a);\n                border-radius: 16px;\n                overflow: hidden;\n            }\n\n            .gradient-border::before {\n                content: \'\';\n                position: absolute;\n                inset: 0;\n                border-radius: 16px;\n                padding: 2px;\n                background: linear-gradient(135deg, #3b82f6, #8b5cf6, #ec4899);\n                -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n                -webkit-mask-composite: xor;\n                mask-composite: exclude;\n                opacity: 0.6;\n                animation: glow 3s ease-in-out infinite alternate;\n            }\n\n            .particle {\n                position: absolute;\n                width: 4px;\n                height: 4px;\n                background: rgba(139, 92, 246, 0.6);\n                border-radius: 50%;\n                pointer-events: none;\n                animation: particles 20s linear infinite;\n            }\n\n            .ai-glow {\n                position: relative;\n                overflow: hidden;\n            }\n\n            .ai-glow::after {\n                content: \'\';\n                position: absolute;\n                top: -50%;\n                left: -50%;\n                width: 200%;\n                height: 200%;\n                background: conic-gradient(transparent, rgba(139, 92, 246, 0.3), transparent);\n                animation: spin 4s linear infinite;\n            }\n\n            .ai-glow .content {\n                position: relative;\n                z-index: 1;\n            }\n\n            @keyframes spin {\n                0% { transform: rotate(0deg); }\n                100% { transform: rotate(360deg); }\n            }\n\n            .trading-active {\n                animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n            }\n\n            .signal-alert {\n                position: fixed;\n                top: 100px;\n                right: 20px;\n                background: linear-gradient(135deg, #8b5cf6, #ec4899);\n                border-radius: 12px;\n                padding: 16px;\n                box-shadow: 0 20px 40px rgba(139, 92, 246, 0.4);\n                transform: translateX(400px);\n                opacity: 0;\n                transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n                z-index: 1000;\n                max-width: 320px;\n            }\n\n            .signal-alert.show {\n                transform: translateX(0);\n                opacity: 1;\n            }\n\n            ::-webkit-scrollbar {\n                width: 8px;\n                height: 8px;\n            }\n\n            ::-webkit-scrollbar-track {\n                background: rgba(15, 23, 42, 0.5);\n            }\n\n            ::-webkit-scrollbar-thumb {\n                background: linear-gradient(135deg, #3b82f6, #8b5cf6);\n                border-radius: 4px;\n            }\n        </style>\n    </head>\n\n    <body class="min-h-screen bg-gradient-to-br from-gray-950 via-slate-900 to-purple-950"\n          x-data="sofiaUltimate()" x-init="init()">\n\n        <!-- Animated background particles -->\n        <div class="fixed inset-0 overflow-hidden pointer-events-none">\n            <div class="absolute top-0 left-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse-slow"></div>\n            <div class="absolute bottom-0 right-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse-slow" style="animation-delay: 2s;"></div>\n            <div class="absolute top-1/2 left-1/2 w-64 h-64 bg-pink-500/10 rounded-full blur-3xl animate-pulse-slow" style="animation-delay: 4s;"></div>\n\n            <!-- Floating particles -->\n            <div class="particle" style="left: 10%; animation-delay: 0s;"></div>\n            <div class="particle" style="left: 20%; animation-delay: 2s;"></div>\n            <div class="particle" style="left: 30%; animation-delay: 4s;"></div>\n            <div class="particle" style="left: 40%; animation-delay: 6s;"></div>\n            <div class="particle" style="left: 50%; animation-delay: 8s;"></div>\n            <div class="particle" style="left: 60%; animation-delay: 10s;"></div>\n            <div class="particle" style="left: 70%; animation-delay: 12s;"></div>\n            <div class="particle" style="left: 80%; animation-delay: 14s;"></div>\n            <div class="particle" style="left: 90%; animation-delay: 16s;"></div>\n        </div>\n\n        <div class="relative flex h-screen">\n            <!-- Sidebar -->\n            <aside class="fixed lg:relative w-64 h-full glass border-r border-slate-800 z-50 transform transition-all duration-500 lg:translate-x-0"\n                   :class="{\'translate-x-0\': sidebarOpen, \'-translate-x-full\': !sidebarOpen}">\n                <div class="p-6 border-b border-slate-800">\n                    <div class="flex items-center space-x-3">\n                        <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-500 to-pink-600 flex items-center justify-center shadow-lg animate-glow">\n                            <i class="fas fa-robot text-white text-lg"></i>\n                        </div>\n                        <div>\n                            <h1 class="text-xl font-bold text-white">Sofia V2 Ultimate</h1>\n                            <p class="text-xs text-slate-400">AI Trading Platform</p>\n                        </div>\n                    </div>\n                </div>\n\n                <nav class="p-4 space-y-2">\n                    <a href="#" @click="activeTab = \'dashboard\'" :class="activeTab === \'dashboard\' ? \'bg-gradient-to-r from-purple-600/30 to-pink-600/30 border border-purple-500/40 text-purple-400\' : \'text-slate-400 hover:bg-slate-800/50\'"\n                       class="flex items-center px-4 py-3 rounded-lg transition-all">\n                        <i class="fas fa-th-large w-5"></i>\n                        <span class="ml-3">Dashboard</span>\n                        <span x-show="activeTab === \'dashboard\'" class="ml-auto w-2 h-2 bg-purple-400 rounded-full animate-pulse"></span>\n                    </a>\n                    <a href="#" @click="activeTab = \'portfolio\'" :class="activeTab === \'portfolio\' ? \'bg-gradient-to-r from-purple-600/30 to-pink-600/30 border border-purple-500/40 text-purple-400\' : \'text-slate-400 hover:bg-slate-800/50\'"\n                       class="flex items-center px-4 py-3 rounded-lg transition-all">\n                        <i class="fas fa-briefcase w-5"></i>\n                        <span class="ml-3">Portfolio</span>\n                        <span x-show="activeTab === \'portfolio\'" class="ml-auto w-2 h-2 bg-purple-400 rounded-full animate-pulse"></span>\n                    </a>\n                    <a href="#" @click="activeTab = \'ai_predictions\'" :class="activeTab === \'ai_predictions\' ? \'bg-gradient-to-r from-purple-600/30 to-pink-600/30 border border-purple-500/40 text-purple-400\' : \'text-slate-400 hover:bg-slate-800/50\'"\n                       class="flex items-center px-4 py-3 rounded-lg transition-all">\n                        <i class="fas fa-brain w-5"></i>\n                        <span class="ml-3">AI Predictions</span>\n                        <span x-show="activeTab === \'ai_predictions\'" class="ml-auto w-2 h-2 bg-purple-400 rounded-full animate-pulse"></span>\n                    </a>\n                    <a href="#" @click="activeTab = \'market_scanner\'" :class="activeTab === \'market_scanner\' ? \'bg-gradient-to-r from-purple-600/30 to-pink-600/30 border border-purple-500/40 text-purple-400\' : \'text-slate-400 hover:bg-slate-800/50\'"\n                       class="flex items-center px-4 py-3 rounded-lg transition-all">\n                        <i class="fas fa-radar-dish w-5"></i>\n                        <span class="ml-3">Market Scanner</span>\n                        <span x-show="activeTab === \'market_scanner\'" class="ml-auto w-2 h-2 bg-purple-400 rounded-full animate-pulse"></span>\n                    </a>\n                    <a href="#" @click="activeTab = \'trading\'" :class="activeTab === \'trading\' ? \'bg-gradient-to-r from-purple-600/30 to-pink-600/30 border border-purple-500/40 text-purple-400\' : \'text-slate-400 hover:bg-slate-800/50\'"\n                       class="flex items-center px-4 py-3 rounded-lg transition-all">\n                        <i class="fas fa-chart-line w-5"></i>\n                        <span class="ml-3">Trading</span>\n                        <span x-show="activeTab === \'trading\'" class="ml-auto w-2 h-2 bg-purple-400 rounded-full animate-pulse"></span>\n                    </a>\n                </nav>\n            </aside>\n\n            <!-- Main Content -->\n            <div class="flex-1 flex flex-col lg:ml-0">\n                <!-- Header -->\n                <header class="glass border-b border-slate-800 px-6 py-4">\n                    <div class="flex items-center justify-between">\n                        <div class="flex items-center space-x-4">\n                            <button @click="sidebarOpen = !sidebarOpen" class="text-slate-400 hover:text-white lg:hidden">\n                                <i class="fas fa-bars"></i>\n                            </button>\n                            <h2 class="text-xl font-semibold text-white" x-text="getTabTitle()">Sofia V2 Ultimate</h2>\n                            <div class="hidden sm:flex items-center space-x-2">\n                                <div class="w-2 h-2 rounded-full bg-green-500 trading-active"></div>\n                                <span class="text-xs text-green-400">Trading Active</span>\n                                <span class="text-xs text-slate-500">â€¢</span>\n                                <span class="text-xs text-purple-400" x-text="\'AI Models: \' + ai_models_active + \'/5\'">AI Models: 5/5</span>\n                            </div>\n                        </div>\n                        <div class="flex items-center space-x-4">\n                            <div class="text-sm text-slate-400">\n                                <span x-text="\'Last Update: \' + last_update">Last Update: --:--</span>\n                            </div>\n                            <button @click="refreshData()" class="text-slate-400 hover:text-white transition-colors">\n                                <i class="fas fa-sync-alt" :class="{\'animate-spin\': isRefreshing}"></i>\n                            </button>\n                        </div>\n                    </div>\n                </header>\n\n                <!-- Tab Content -->\n                <div class="flex-1 p-6 overflow-y-auto">\n\n                    <!-- Dashboard Tab -->\n                    <div x-show="activeTab === \'dashboard\'" class="space-y-6">\n                        <!-- Real-time Stats Cards -->\n                        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">\n                            <!-- Portfolio Value -->\n                            <div class="gradient-border glass-hover transition-all cursor-pointer">\n                                <div class="content p-6">\n                                    <div class="flex items-center justify-between mb-3">\n                                        <span class="text-sm text-slate-400">Portfolio Value</span>\n                                        <i class="fas fa-wallet text-purple-400 text-lg"></i>\n                                    </div>\n                                    <div class="text-2xl font-bold text-white mb-2" x-text="formatCurrency(portfolio.total_value)">$100,000</div>\n                                    <div class="flex items-center space-x-2">\n                                        <span class="text-sm font-medium" :class="portfolio.daily_pnl_percent >= 0 ? \'text-green-400\' : \'text-red-400\'"\n                                              x-text="formatPercentage(portfolio.daily_pnl_percent)">+0.00%</span>\n                                        <span class="text-xs text-slate-500">today</span>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- Active Trades -->\n                            <div class="gradient-border glass-hover transition-all cursor-pointer">\n                                <div class="content p-6">\n                                    <div class="flex items-center justify-between mb-3">\n                                        <span class="text-sm text-slate-400">Active Trades</span>\n                                        <i class="fas fa-chart-line text-blue-400 text-lg"></i>\n                                    </div>\n                                    <div class="text-2xl font-bold text-white mb-2" x-text="positions.length">0</div>\n                                    <div class="text-xs text-slate-400">Live positions</div>\n                                </div>\n                            </div>\n\n                            <!-- AI Predictions -->\n                            <div class="gradient-border glass-hover transition-all cursor-pointer ai-glow">\n                                <div class="content p-6">\n                                    <div class="flex items-center justify-between mb-3">\n                                        <span class="text-sm text-slate-400">AI Signals</span>\n                                        <i class="fas fa-brain text-pink-400 text-lg"></i>\n                                    </div>\n                                    <div class="text-2xl font-bold text-white mb-2" x-text="ai_signals_count">0</div>\n                                    <div class="text-xs text-pink-400">ML Predictions</div>\n                                </div>\n                            </div>\n\n                            <!-- Win Rate -->\n                            <div class="gradient-border glass-hover transition-all cursor-pointer">\n                                <div class="content p-6">\n                                    <div class="flex items-center justify-between mb-3">\n                                        <span class="text-sm text-slate-400">Win Rate</span>\n                                        <i class="fas fa-trophy text-yellow-400 text-lg"></i>\n                                    </div>\n                                    <div class="text-2xl font-bold text-white mb-2" x-text="formatPercentage(win_rate)">0%</div>\n                                    <div class="text-xs text-slate-400" x-text="total_trades + \' trades\'">0 trades</div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <!-- Live Charts -->\n                        <div class="grid grid-cols-1 xl:grid-cols-2 gap-6">\n                            <!-- Market Chart -->\n                            <div class="gradient-border glass-hover transition-all">\n                                <div class="content p-6">\n                                    <h3 class="text-lg font-semibold text-white mb-4">Live Market Data</h3>\n                                    <div class="h-80">\n                                        <canvas id="market-chart"></canvas>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- Portfolio Performance -->\n                            <div class="gradient-border glass-hover transition-all">\n                                <div class="content p-6">\n                                    <h3 class="text-lg font-semibold text-white mb-4">Portfolio Performance</h3>\n                                    <div class="h-80">\n                                        <canvas id="portfolio-chart"></canvas>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- Portfolio Tab -->\n                    <div x-show="activeTab === \'portfolio\'" class="space-y-6">\n                        <div class="gradient-border glass-hover transition-all">\n                            <div class="content p-6">\n                                <h3 class="text-lg font-semibold text-white mb-4">Current Positions</h3>\n                                <div x-show="positions.length === 0" class="text-center py-12">\n                                    <i class="fas fa-chart-pie text-6xl text-slate-600 mb-4"></i>\n                                    <p class="text-slate-400 text-lg mb-2">No active positions</p>\n                                    <p class="text-slate-500">AI trading system is running, positions will appear here</p>\n                                </div>\n\n                                <div x-show="positions.length > 0" class="overflow-x-auto">\n                                    <table class="w-full">\n                                        <thead>\n                                            <tr class="border-b border-slate-700">\n                                                <th class="text-left py-3 text-sm text-slate-400">Symbol</th>\n                                                <th class="text-right py-3 text-sm text-slate-400">Side</th>\n                                                <th class="text-right py-3 text-sm text-slate-400">Size</th>\n                                                <th class="text-right py-3 text-sm text-slate-400">Entry</th>\n                                                <th class="text-right py-3 text-sm text-slate-400">Current</th>\n                                                <th class="text-right py-3 text-sm text-slate-400">P&L</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <template x-for="position in positions" :key="position.symbol">\n                                                <tr class="border-b border-slate-800/50 hover:bg-slate-800/30 transition-all">\n                                                    <td class="py-3 font-medium text-white" x-text="position.symbol"></td>\n                                                    <td class="py-3 text-right">\n                                                        <span :class="position.side === \'buy\' ? \'text-green-400\' : \'text-red-400\'"\n                                                              class="text-sm font-medium" x-text="position.side.toUpperCase()"></span>\n                                                    </td>\n                                                    <td class="py-3 text-right text-white" x-text="position.size.toFixed(4)"></td>\n                                                    <td class="py-3 text-right text-white" x-text="\'$\' + position.entry_price.toFixed(2)"></td>\n                                                    <td class="py-3 text-right text-white" x-text="\'$\' + position.current_price.toFixed(2)"></td>\n                                                    <td class="py-3 text-right">\n                                                        <span :class="position.pnl >= 0 ? \'text-green-400\' : \'text-red-400\'"\n                                                              class="font-medium" x-text="formatCurrency(position.pnl)"></span>\n                                                    </td>\n                                                </tr>\n                                            </template>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n\n                        <!-- Recent Trades -->\n                        <div class="gradient-border glass-hover transition-all">\n                            <div class="content p-6">\n                                <h3 class="text-lg font-semibold text-white mb-4">Recent Trades</h3>\n                                <div x-show="recent_trades.length === 0" class="text-center py-8">\n                                    <i class="fas fa-exchange-alt text-4xl text-slate-600 mb-3"></i>\n                                    <p class="text-slate-400">No trades yet</p>\n                                </div>\n\n                                <div x-show="recent_trades.length > 0" class="space-y-3">\n                                    <template x-for="(trade, index) in recent_trades.slice(0, 10)" :key="index">\n                                        <div class="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-all">\n                                            <div class="flex items-center space-x-3">\n                                                <div class="w-8 h-8 rounded-full flex items-center justify-center"\n                                                     :class="trade.side === \'buy\' ? \'bg-green-500/20 text-green-400\' : \'bg-red-500/20 text-red-400\'">\n                                                    <i :class="trade.side === \'buy\' ? \'fas fa-arrow-up\' : \'fas fa-arrow-down\'"></i>\n                                                </div>\n                                                <div>\n                                                    <p class="font-medium text-white" x-text="trade.symbol"></p>\n                                                    <p class="text-xs text-slate-400" x-text="trade.time"></p>\n                                                </div>\n                                            </div>\n                                            <div class="text-right">\n                                                <p class="font-medium" :class="trade.side === \'buy\' ? \'text-green-400\' : \'text-red-400\'"\n                                                   x-text="trade.side.toUpperCase()"></p>\n                                                <p class="text-xs text-slate-400" x-text="trade.size + \' @ $\' + trade.price"></p>\n                                            </div>\n                                        </div>\n                                    </template>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- AI Predictions Tab -->\n                    <div x-show="activeTab === \'ai_predictions\'" class="space-y-6">\n                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">\n                            <template x-for="(prediction, symbol) in ai_predictions" :key="symbol">\n                                <div class="gradient-border glass-hover transition-all ai-glow">\n                                    <div class="content p-6">\n                                        <div class="flex items-center justify-between mb-4">\n                                            <h3 class="text-lg font-semibold text-white" x-text="symbol"></h3>\n                                            <span class="text-sm text-slate-400" x-text="\'Updated: \' + formatTime(prediction.timestamp)"></span>\n                                        </div>\n\n                                        <div class="space-y-4">\n                                            <div class="flex justify-between items-center">\n                                                <span class="text-slate-400">Current Price:</span>\n                                                <span class="text-white font-medium" x-text="formatCurrency(prediction.current_price)"></span>\n                                            </div>\n\n                                            <div class="grid grid-cols-3 gap-4 text-sm">\n                                                <div class="text-center">\n                                                    <div class="text-slate-400 mb-1">1H</div>\n                                                    <div class="font-medium" :class="prediction.predictions[\'1h\'].price > prediction.current_price ? \'text-green-400\' : \'text-red-400\'"\n                                                         x-text="formatCurrency(prediction.predictions[\'1h\'].price)"></div>\n                                                    <div class="text-xs text-slate-500" x-text="prediction.predictions[\'1h\'].confidence.toFixed(1) + \'%\'"></div>\n                                                </div>\n                                                <div class="text-center">\n                                                    <div class="text-slate-400 mb-1">24H</div>\n                                                    <div class="font-medium" :class="prediction.predictions[\'24h\'].price > prediction.current_price ? \'text-green-400\' : \'text-red-400\'"\n                                                         x-text="formatCurrency(prediction.predictions[\'24h\'].price)"></div>\n                                                    <div class="text-xs text-slate-500" x-text="prediction.predictions[\'24h\'].confidence.toFixed(1) + \'%\'"></div>\n                                                </div>\n                                                <div class="text-center">\n                                                    <div class="text-slate-400 mb-1">7D</div>\n                                                    <div class="font-medium" :class="prediction.predictions[\'7d\'].price > prediction.current_price ? \'text-green-400\' : \'text-red-400\'"\n                                                         x-text="formatCurrency(prediction.predictions[\'7d\'].price)"></div>\n                                                    <div class="text-xs text-slate-500" x-text="prediction.predictions[\'7d\'].confidence.toFixed(1) + \'%\'"></div>\n                                                </div>\n                                            </div>\n\n                                            <div class="flex items-center justify-between pt-3 border-t border-slate-700">\n                                                <span class="text-slate-400">Trend:</span>\n                                                <span class="px-2 py-1 rounded text-xs font-medium"\n                                                      :class="{\n                                                          \'bg-green-500/20 text-green-400\': prediction.trend_direction === \'up\',\n                                                          \'bg-red-500/20 text-red-400\': prediction.trend_direction === \'down\',\n                                                          \'bg-yellow-500/20 text-yellow-400\': prediction.trend_direction === \'sideways\'\n                                                      }"\n                                                      x-text="prediction.trend_direction.toUpperCase()"></span>\n                                            </div>\n\n                                            <div class="flex items-center justify-between">\n                                                <span class="text-slate-400">Signal Strength:</span>\n                                                <div class="flex items-center space-x-2">\n                                                    <div class="w-20 h-2 bg-slate-700 rounded-full overflow-hidden">\n                                                        <div class="h-full bg-gradient-to-r from-purple-500 to-pink-500 transition-all"\n                                                             :style="\'width: \' + prediction.signal_strength + \'%\'"></div>\n                                                    </div>\n                                                    <span class="text-xs text-slate-400" x-text="prediction.signal_strength.toFixed(0) + \'%\'"></span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </template>\n                        </div>\n                    </div>\n\n                    <!-- Market Scanner Tab -->\n                    <div x-show="activeTab === \'market_scanner\'" class="space-y-6">\n                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">\n                            <!-- Top Opportunities -->\n                            <div class="gradient-border glass-hover transition-all">\n                                <div class="content p-6">\n                                    <h3 class="text-lg font-semibold text-white mb-4">ðŸŽ¯ Top Opportunities</h3>\n                                    <div x-show="scanner_signals.length === 0" class="text-center py-8">\n                                        <i class="fas fa-search text-4xl text-slate-600 mb-3"></i>\n                                        <p class="text-slate-400">Scanning markets...</p>\n                                    </div>\n\n                                    <div x-show="scanner_signals.length > 0" class="space-y-3">\n                                        <template x-for="signal in scanner_signals.slice(0, 5)" :key="signal.id">\n                                            <div class="p-4 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-all">\n                                                <div class="flex items-center justify-between mb-2">\n                                                    <div class="flex items-center space-x-2">\n                                                        <span class="font-medium text-white" x-text="signal.symbol"></span>\n                                                        <span class="px-2 py-1 rounded text-xs font-medium"\n                                                              :class="{\n                                                                  \'bg-green-500/20 text-green-400\': signal.signal_type.includes(\'buy\'),\n                                                                  \'bg-red-500/20 text-red-400\': signal.signal_type.includes(\'sell\'),\n                                                                  \'bg-yellow-500/20 text-yellow-400\': signal.signal_type === \'neutral\'\n                                                              }"\n                                                              x-text="signal.signal_type.toUpperCase()"></span>\n                                                    </div>\n                                                    <div class="text-right">\n                                                        <div class="text-sm text-white" x-text="\'$\' + signal.price.toFixed(4)"></div>\n                                                        <div class="text-xs text-slate-400" x-text="signal.strength.toFixed(0) + \'% strength\'"></div>\n                                                    </div>\n                                                </div>\n                                                <p class="text-sm text-slate-300" x-text="signal.message"></p>\n                                                <div class="flex items-center justify-between mt-2 text-xs text-slate-400">\n                                                    <span x-text="signal.strategy"></span>\n                                                    <span x-text="formatTime(signal.timestamp)"></span>\n                                                </div>\n                                            </div>\n                                        </template>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- Market Sentiment -->\n                            <div class="gradient-border glass-hover transition-all">\n                                <div class="content p-6">\n                                    <h3 class="text-lg font-semibold text-white mb-4">ðŸ“Š Market Sentiment</h3>\n                                    <div class="space-y-4">\n                                        <div class="text-center">\n                                            <div class="text-3xl font-bold mb-2"\n                                                 :class="{\n                                                     \'text-green-400\': market_sentiment.overall_sentiment > 20,\n                                                     \'text-red-400\': market_sentiment.overall_sentiment < -20,\n                                                     \'text-yellow-400\': Math.abs(market_sentiment.overall_sentiment) <= 20\n                                                 }"\n                                                 x-text="market_sentiment.sentiment_label || \'Neutral\'">Neutral</div>\n                                            <div class="text-sm text-slate-400">Overall Market Sentiment</div>\n                                        </div>\n\n                                        <div class="grid grid-cols-2 gap-4 text-sm">\n                                            <div class="text-center">\n                                                <div class="text-xl font-bold text-blue-400" x-text="(market_sentiment.average_volatility * 100).toFixed(1) + \'%\'">15.0%</div>\n                                                <div class="text-slate-400">Avg Volatility</div>\n                                            </div>\n                                            <div class="text-center">\n                                                <div class="text-xl font-bold text-purple-400" x-text="market_sentiment.active_signals || 0">0</div>\n                                                <div class="text-slate-400">Active Signals</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- Trading Tab -->\n                    <div x-show="activeTab === \'trading\'" class="space-y-6">\n                        <div class="gradient-border glass-hover transition-all">\n                            <div class="content p-6">\n                                <h3 class="text-lg font-semibold text-white mb-4">ðŸ¤– AI Trading Console</h3>\n                                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">\n                                    <div class="text-center">\n                                        <div class="text-2xl font-bold text-green-400 mb-1">ACTIVE</div>\n                                        <div class="text-sm text-slate-400">Trading Status</div>\n                                    </div>\n                                    <div class="text-center">\n                                        <div class="text-2xl font-bold text-blue-400 mb-1" x-text="ai_models_active">5</div>\n                                        <div class="text-sm text-slate-400">AI Models Running</div>\n                                    </div>\n                                    <div class="text-center">\n                                        <div class="text-2xl font-bold text-purple-400 mb-1" x-text="\'$\' + (portfolio.total_value - 100000).toFixed(0)">$0</div>\n                                        <div class="text-sm text-slate-400">Total P&L</div>\n                                    </div>\n                                </div>\n\n                                <div class="mt-6 p-4 bg-slate-800/30 rounded-lg">\n                                    <p class="text-sm text-slate-300 text-center">\n                                        ðŸš€ AI trading system is running with real market data. All trades are simulated with paper money.\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Signal Alert -->\n        <div id="signal-alert" class="signal-alert">\n            <div class="flex items-start space-x-3">\n                <i class="fas fa-robot text-white text-lg mt-1"></i>\n                <div>\n                    <div class="font-bold text-white mb-1" id="alert-title">New Trading Signal</div>\n                    <div class="text-sm text-white/80" id="alert-message">Signal details...</div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Real-time Status -->\n        <div class="fixed bottom-6 right-6 glass rounded-xl p-4 max-w-sm">\n            <div class="flex items-center space-x-3">\n                <div class="w-3 h-3 rounded-full bg-green-500 trading-active"></div>\n                <div>\n                    <p class="text-sm font-medium text-white">Sofia V2 Ultimate</p>\n                    <p class="text-xs text-slate-400" x-text="\'5 AI models â€¢ \' + positions.length + \' positions â€¢ Real-time\'">5 AI models â€¢ 0 positions â€¢ Real-time</p>\n                </div>\n            </div>\n        </div>\n\n        <script>\n            function sofiaUltimate() {\n                return {\n                    // UI State\n                    sidebarOpen: false,\n                    activeTab: \'dashboard\',\n                    isRefreshing: false,\n                    last_update: new Date().toLocaleTimeString(),\n\n                    // Data State\n                    portfolio: {\n                        total_value: 100000,\n                        daily_pnl: 0,\n                        daily_pnl_percent: 0\n                    },\n                    positions: [],\n                    recent_trades: [],\n                    ai_predictions: {},\n                    scanner_signals: [],\n                    market_data: {},\n                    market_sentiment: {\n                        overall_sentiment: 0,\n                        sentiment_label: \'Neutral\',\n                        average_volatility: 0.15,\n                        active_signals: 0\n                    },\n\n                    // Stats\n                    ai_models_active: 5,\n                    ai_signals_count: 0,\n                    win_rate: 0,\n                    total_trades: 0,\n\n                    // WebSocket\n                    websocket: null,\n\n                    // Charts\n                    marketChart: null,\n                    portfolioChart: null,\n\n                    init() {\n                        this.connectWebSocket();\n                        this.initCharts();\n                        this.startUpdateLoop();\n                    },\n\n                    connectWebSocket() {\n                        try {\n                            const protocol = window.location.protocol === \'https:\' ? \'wss:\' : \'ws:\';\n                            const wsUrl = `${protocol}//${window.location.host}/ws/ultimate`;\n\n                            this.websocket = new WebSocket(wsUrl);\n\n                            this.websocket.onopen = () => {\n                                console.log(\'Sofia Ultimate WebSocket connected\');\n                            };\n\n                            this.websocket.onmessage = (event) => {\n                                const data = JSON.parse(event.data);\n                                this.handleWebSocketMessage(data);\n                            };\n\n                            this.websocket.onclose = () => {\n                                console.log(\'WebSocket closed, reconnecting...\');\n                                setTimeout(() => this.connectWebSocket(), 5000);\n                            };\n                        } catch (error) {\n                            console.log(\'WebSocket failed, using fallback data\');\n                            this.startSimulation();\n                        }\n                    },\n\n                    handleWebSocketMessage(data) {\n                        switch(data.type) {\n                            case \'portfolio_update\':\n                                this.portfolio = { ...this.portfolio, ...data.data };\n                                break;\n                            case \'ai_predictions\':\n                                this.ai_predictions = data.data;\n                                this.ai_signals_count = Object.keys(data.data).length;\n                                break;\n                            case \'scanner_signals\':\n                                this.scanner_signals = data.data;\n                                break;\n                            case \'market_data\':\n                                this.market_data = data.data;\n                                this.updateCharts();\n                                break;\n                            case \'trading_signal\':\n                                this.showSignalAlert(data.data);\n                                break;\n                            case \'market_sentiment\':\n                                this.market_sentiment = data.data;\n                                break;\n                        }\n                        this.last_update = new Date().toLocaleTimeString();\n                    },\n\n                    startSimulation() {\n                        // Simulate real data for demo\n                        setInterval(() => {\n                            this.portfolio.total_value += (Math.random() - 0.5) * 200;\n                            this.portfolio.daily_pnl += (Math.random() - 0.5) * 50;\n                            this.portfolio.daily_pnl_percent = (this.portfolio.daily_pnl / 100000) * 100;\n\n                            if (Math.random() < 0.1) { // 10% chance of new signal\n                                this.addRandomSignal();\n                            }\n\n                            this.last_update = new Date().toLocaleTimeString();\n                        }, 5000);\n                    },\n\n                    addRandomSignal() {\n                        const symbols = [\'BTC\', \'ETH\', \'SOL\', \'BNB\', \'ADA\'];\n                        const signals = [\'buy\', \'sell\', \'strong_buy\', \'strong_sell\'];\n                        const strategies = [\'momentum\', \'breakout\', \'rsi_oversold\', \'volume_surge\'];\n\n                        const signal = {\n                            id: Date.now(),\n                            symbol: symbols[Math.floor(Math.random() * symbols.length)],\n                            signal_type: signals[Math.floor(Math.random() * signals.length)],\n                            strategy: strategies[Math.floor(Math.random() * strategies.length)],\n                            strength: Math.random() * 100,\n                            price: 30000 + Math.random() * 40000,\n                            message: \'AI detected trading opportunity\',\n                            timestamp: new Date().toISOString()\n                        };\n\n                        this.scanner_signals.unshift(signal);\n                        if (this.scanner_signals.length > 20) {\n                            this.scanner_signals.pop();\n                        }\n\n                        this.showSignalAlert(signal);\n                    },\n\n                    showSignalAlert(signal) {\n                        const alertEl = document.getElementById(\'signal-alert\');\n                        const titleEl = document.getElementById(\'alert-title\');\n                        const messageEl = document.getElementById(\'alert-message\');\n\n                        titleEl.textContent = `${signal.symbol} ${signal.signal_type.toUpperCase()}`;\n                        messageEl.textContent = signal.message;\n\n                        alertEl.classList.add(\'show\');\n\n                        setTimeout(() => {\n                            alertEl.classList.remove(\'show\');\n                        }, 5000);\n                    },\n\n                    initCharts() {\n                        // Market Chart\n                        const marketCtx = document.getElementById(\'market-chart\').getContext(\'2d\');\n                        this.marketChart = new Chart(marketCtx, {\n                            type: \'line\',\n                            data: {\n                                labels: [],\n                                datasets: [{\n                                    label: \'BTC\',\n                                    data: [],\n                                    borderColor: \'#8b5cf6\',\n                                    backgroundColor: \'rgba(139, 92, 246, 0.1)\',\n                                    tension: 0.4,\n                                    fill: true\n                                }]\n                            },\n                            options: {\n                                responsive: true,\n                                maintainAspectRatio: false,\n                                plugins: {\n                                    legend: {\n                                        labels: { color: \'#ffffff\' }\n                                    }\n                                },\n                                scales: {\n                                    x: {\n                                        ticks: { color: \'#888888\' },\n                                        grid: { color: \'rgba(255, 255, 255, 0.1)\' }\n                                    },\n                                    y: {\n                                        ticks: { color: \'#888888\' },\n                                        grid: { color: \'rgba(255, 255, 255, 0.1)\' }\n                                    }\n                                }\n                            }\n                        });\n\n                        // Portfolio Chart\n                        const portfolioCtx = document.getElementById(\'portfolio-chart\').getContext(\'2d\');\n                        this.portfolioChart = new Chart(portfolioCtx, {\n                            type: \'line\',\n                            data: {\n                                labels: [],\n                                datasets: [{\n                                    label: \'Portfolio Value\',\n                                    data: [],\n                                    borderColor: \'#ec4899\',\n                                    backgroundColor: \'rgba(236, 72, 153, 0.1)\',\n                                    tension: 0.4,\n                                    fill: true\n                                }]\n                            },\n                            options: {\n                                responsive: true,\n                                maintainAspectRatio: false,\n                                plugins: {\n                                    legend: {\n                                        labels: { color: \'#ffffff\' }\n                                    }\n                                },\n                                scales: {\n                                    x: {\n                                        ticks: { color: \'#888888\' },\n                                        grid: { color: \'rgba(255, 255, 255, 0.1)\' }\n                                    },\n                                    y: {\n                                        ticks: { color: \'#888888\' },\n                                        grid: { color: \'rgba(255, 255, 255, 0.1)\' }\n                                    }\n                                }\n                            }\n                        });\n                    },\n\n                    updateCharts() {\n                        const now = new Date().toLocaleTimeString();\n\n                        // Update market chart\n                        if (this.market_data.BTC) {\n                            this.marketChart.data.labels.push(now);\n                            this.marketChart.data.datasets[0].data.push(this.market_data.BTC.price);\n\n                            if (this.marketChart.data.labels.length > 20) {\n                                this.marketChart.data.labels.shift();\n                                this.marketChart.data.datasets[0].data.shift();\n                            }\n\n                            this.marketChart.update(\'none\');\n                        }\n\n                        // Update portfolio chart\n                        this.portfolioChart.data.labels.push(now);\n                        this.portfolioChart.data.datasets[0].data.push(this.portfolio.total_value);\n\n                        if (this.portfolioChart.data.labels.length > 20) {\n                            this.portfolioChart.data.labels.shift();\n                            this.portfolioChart.data.datasets[0].data.shift();\n                        }\n\n                        this.portfolioChart.update(\'none\');\n                    },\n\n                    startUpdateLoop() {\n                        setInterval(() => {\n                            this.updateCharts();\n                        }, 10000); // Update charts every 10 seconds\n                    },\n\n                    refreshData() {\n                        this.isRefreshing = true;\n                        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n                            this.websocket.send(JSON.stringify({type: \'refresh_all\'}));\n                        }\n                        setTimeout(() => {\n                            this.isRefreshing = false;\n                        }, 2000);\n                    },\n\n                    getTabTitle() {\n                        const titles = {\n                            dashboard: \'Sofia V2 Ultimate Dashboard\',\n                            portfolio: \'Portfolio Management\',\n                            ai_predictions: \'AI Predictions\',\n                            market_scanner: \'Market Scanner\',\n                            trading: \'AI Trading Console\'\n                        };\n                        return titles[this.activeTab] || \'Sofia V2 Ultimate\';\n                    },\n\n                    formatCurrency(amount) {\n                        return new Intl.NumberFormat(\'en-US\', {\n                            style: \'currency\',\n                            currency: \'USD\',\n                            minimumFractionDigits: 2,\n                            maximumFractionDigits: 2\n                        }).format(amount);\n                    },\n\n                    formatPercentage(percent) {\n                        return (percent >= 0 ? \'+\' : \'\') + percent.toFixed(2) + \'%\';\n                    },\n\n                    formatTime(timestamp) {\n                        return new Date(timestamp).toLocaleTimeString();\n                    }\n                }\n            }\n        </script>\n    </body>\n    </html>\n    '


@app.websocket("/ws/ultimate")
async def ultimate_websocket(websocket: WebSocket):
    """Ultimate WebSocket endpoint"""
    client_id = str(uuid.uuid4())
    user_id = "demo"
    await ultimate_manager.connect(websocket, client_id, user_id)
    try:
        while True:
            data = await websocket.receive_text()
            message = json.loads(data)
            if message.get("type") == "refresh_all":
                await send_all_data(user_id)
    except WebSocketDisconnect:
        ultimate_manager.disconnect(client_id)


async def send_all_data(user_id: str):
    """Send all data to user"""
    try:
        portfolio = paper_engine.get_portfolio_summary(user_id)
        if portfolio:
            await ultimate_manager.broadcast_to_all({"type": "portfolio_update", "data": portfolio})
        predictions = prediction_engine.get_all_predictions()
        if predictions:
            await ultimate_manager.broadcast_to_all({"type": "ai_predictions", "data": predictions})
        market_data = await fetcher.get_market_data(["bitcoin", "ethereum", "solana"])
        if market_data:
            await ultimate_manager.broadcast_to_all({"type": "market_data", "data": market_data})
        overview = await market_scanner.get_market_overview()
        if overview.get("recent_signals"):
            await ultimate_manager.broadcast_to_all(
                {"type": "scanner_signals", "data": overview["recent_signals"]}
            )
        if overview.get("market_sentiment"):
            await ultimate_manager.broadcast_to_all(
                {"type": "market_sentiment", "data": overview["market_sentiment"]}
            )
    except Exception as e:
        logger.error(f"Error sending all data: {e}")


async def broadcast_ultimate_data():
    """Enhanced data broadcasting for ultimate dashboard"""
    while True:
        try:
            await send_all_data("demo")
            await asyncio.sleep(5)
        except Exception as e:
            logger.error(f"Error in ultimate broadcasting: {e}")
            await asyncio.sleep(10)


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8007, log_level="info")
