"""
Dashboard route for P&L visualization
"""

from src.adapters.web.fastapi_adapter import APIRouter, HTMLResponse

router = APIRouter(tags=["Dashboard"])
DASHBOARD_HTML = "\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sofia V2 - P&L Dashboard</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);\n            color: #fff;\n            min-height: 100vh;\n            padding: 20px;\n        }\n        .container { max-width: 1400px; margin: 0 auto; }\n        .header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            background: rgba(255,255,255,0.05);\n            border-radius: 15px;\n        }\n        .header h1 {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n            background: linear-gradient(90deg, #00f260, #0575e6);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n        }\n        .error-banner {\n            display: none;\n            background: #ff4444;\n            color: white;\n            padding: 15px;\n            border-radius: 10px;\n            margin-bottom: 20px;\n            text-align: center;\n            font-weight: bold;\n        }\n        .grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        .card {\n            background: rgba(255,255,255,0.08);\n            border-radius: 15px;\n            padding: 20px;\n            backdrop-filter: blur(10px);\n            border: 1px solid rgba(255,255,255,0.1);\n            transition: transform 0.3s;\n        }\n        .card:hover { transform: translateY(-5px); }\n        .card h2 {\n            font-size: 1rem;\n            color: #888;\n            margin-bottom: 10px;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n        }\n        .pnl-value {\n            font-size: 2.5rem;\n            font-weight: bold;\n            margin-bottom: 5px;\n        }\n        .pnl-positive { color: #00ff88; }\n        .pnl-negative { color: #ff4444; }\n        .pnl-neutral { color: #ffaa00; }\n        .pnl-percent {\n            font-size: 1.2rem;\n            opacity: 0.8;\n        }\n        .chart-container {\n            background: rgba(255,255,255,0.08);\n            border-radius: 15px;\n            padding: 20px;\n            margin-bottom: 30px;\n            height: 400px;\n            position: relative;\n        }\n        .live-proof {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 10px;\n            font-size: 0.9rem;\n        }\n        .live-proof-item {\n            text-align: center;\n            padding: 10px;\n            background: rgba(0,0,0,0.3);\n            border-radius: 8px;\n        }\n        .live-proof-label {\n            color: #888;\n            font-size: 0.8rem;\n            margin-bottom: 5px;\n        }\n        .live-proof-value {\n            font-size: 1.2rem;\n            font-weight: bold;\n            color: #00f260;\n        }\n        .trades-table {\n            background: rgba(255,255,255,0.08);\n            border-radius: 15px;\n            padding: 20px;\n            overflow-x: auto;\n        }\n        .trades-table h2 {\n            margin-bottom: 20px;\n            color: #00f260;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th {\n            text-align: left;\n            padding: 12px;\n            border-bottom: 2px solid rgba(255,255,255,0.1);\n            color: #888;\n            font-size: 0.9rem;\n            text-transform: uppercase;\n        }\n        td {\n            padding: 12px;\n            border-bottom: 1px solid rgba(255,255,255,0.05);\n        }\n        .trade-buy { color: #00ff88; }\n        .trade-sell { color: #ff4444; }\n        .stats-grid {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 10px;\n            margin-top: 10px;\n            padding-top: 10px;\n            border-top: 1px solid rgba(255,255,255,0.1);\n        }\n        .stat-item {\n            display: flex;\n            justify-content: space-between;\n            font-size: 0.9rem;\n        }\n        .stat-label { color: #888; }\n        .stat-value { font-weight: bold; }\n        @keyframes pulse {\n            0% { opacity: 1; }\n            50% { opacity: 0.5; }\n            100% { opacity: 1; }\n        }\n        .updating { animation: pulse 1s infinite; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>Sofia V2 P&L Dashboard</h1>\n            <p style=\"opacity: 0.6\">Real-time Paper Trading Performance</p>\n        </div>\n\n        <div id=\"errorBanner\" class=\"error-banner\">\n            Backend connection lost. Retrying...\n        </div>\n\n        <div class=\"grid\">\n            <!-- Today's P&L Card -->\n            <div class=\"card\">\n                <h2>Today's P&L</h2>\n                <div id=\"todayPnl\" class=\"pnl-value pnl-neutral\">$0.00</div>\n                <div id=\"todayPnlPercent\" class=\"pnl-percent\">0.00%</div>\n                <div class=\"stats-grid\">\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Realized</span>\n                        <span id=\"realizedPnl\" class=\"stat-value\">$0.00</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Unrealized</span>\n                        <span id=\"unrealizedPnl\" class=\"stat-value\">$0.00</span>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Trading Stats Card -->\n            <div class=\"card\">\n                <h2>Trading Stats</h2>\n                <div style=\"font-size: 2rem; font-weight: bold; margin-bottom: 10px;\">\n                    <span id=\"totalTrades\">0</span> Trades\n                </div>\n                <div class=\"stats-grid\">\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Win Rate</span>\n                        <span id=\"winRate\" class=\"stat-value\">0%</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">Equity</span>\n                        <span id=\"currentEquity\" class=\"stat-value\">$1000</span>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Live Proof Card -->\n            <div class=\"card\">\n                <h2>Live Market (BTC/USDT)</h2>\n                <div class=\"live-proof\">\n                    <div class=\"live-proof-item\">\n                        <div class=\"live-proof-label\">BID</div>\n                        <div id=\"liveBid\" class=\"live-proof-value\">-</div>\n                    </div>\n                    <div class=\"live-proof-item\">\n                        <div class=\"live-proof-label\">ASK</div>\n                        <div id=\"liveAsk\" class=\"live-proof-value\">-</div>\n                    </div>\n                    <div class=\"live-proof-item\">\n                        <div class=\"live-proof-label\">LAST</div>\n                        <div id=\"liveLast\" class=\"live-proof-value\">-</div>\n                    </div>\n                </div>\n                <div style=\"text-align: center; margin-top: 10px; opacity: 0.5; font-size: 0.8rem;\">\n                    Exchange: <span id=\"exchangeName\">Binance</span> |\n                    <span id=\"lastUpdate\">Never</span>\n                </div>\n            </div>\n        </div>\n\n        <!-- Equity Chart -->\n        <div class=\"chart-container\">\n            <h2 style=\"margin-bottom: 20px; color: #00f260;\">Equity Curve</h2>\n            <canvas id=\"equityChart\"></canvas>\n        </div>\n\n        <!-- Last Trades Table -->\n        <div class=\"trades-table\">\n            <h2>Last Trades</h2>\n            <table id=\"tradesTable\">\n                <thead>\n                    <tr>\n                        <th>Time</th>\n                        <th>Symbol</th>\n                        <th>Side</th>\n                        <th>Quantity</th>\n                        <th>Price</th>\n                    </tr>\n                </thead>\n                <tbody id=\"tradesBody\">\n                    <tr>\n                        <td colspan=\"5\" style=\"text-align: center; opacity: 0.5;\">No trades yet</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n    <script>\n        // Initialize Chart.js\n        const ctx = document.getElementById('equityChart').getContext('2d');\n        const equityChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [{\n                    label: 'Equity',\n                    data: [],\n                    borderColor: '#00f260',\n                    backgroundColor: 'rgba(0, 242, 96, 0.1)',\n                    borderWidth: 2,\n                    tension: 0,  // No smoothing for step-like appearance\n                    fill: true,\n                    pointRadius: 2,\n                    pointHoverRadius: 5,\n                    pointBackgroundColor: '#00f260',\n                    pointBorderColor: '#00f260',\n                    pointHoverBackgroundColor: '#fff',\n                    pointHoverBorderColor: '#00f260'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                interaction: {\n                    mode: 'index',\n                    intersect: false\n                },\n                plugins: {\n                    legend: { display: false },\n                    tooltip: {\n                        enabled: true,\n                        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                        titleColor: '#00f260',\n                        bodyColor: '#fff',\n                        borderColor: '#00f260',\n                        borderWidth: 1,\n                        padding: 10,\n                        displayColors: false,\n                        callbacks: {\n                            title: function(context) {\n                                return 'Time: ' + context[0].label;\n                            },\n                            label: function(context) {\n                                const value = context.parsed.y;\n                                const firstValue = context.chart.data.datasets[0].data[0];\n                                const change = value - firstValue;\n                                const changePct = ((change / firstValue) * 100).toFixed(2);\n                                return [\n                                    'Equity: $' + value.toFixed(2),\n                                    'Change: $' + change.toFixed(2) + ' (' + (change >= 0 ? '+' : '') + changePct + '%)'\n                                ];\n                            }\n                        }\n                    }\n                },\n                scales: {\n                    x: {\n                        grid: { color: 'rgba(255,255,255,0.05)' },\n                        ticks: {\n                            color: '#888',\n                            maxTicksLimit: 10,\n                            autoSkip: true\n                        }\n                    },\n                    y: {\n                        grid: { color: 'rgba(255,255,255,0.05)' },\n                        ticks: {\n                            color: '#888',\n                            callback: function(value) {\n                                return '$' + value.toFixed(2);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        let equityHistory = [];\n        let errorCount = 0;\n        let sessionRunning = false;\n\n        // Update P&L Summary\n        async function updatePnlSummary() {\n            try {\n                const response = await fetch('/api/pnl/summary');\n                if (!response.ok) throw new Error('Failed to fetch P&L');\n\n                const data = await response.json();\n\n                // Update P&L values\n                const totalPnl = data.total_pnl || 0;\n                const pnlPercent = data.pnl_percentage || 0;\n\n                document.getElementById('todayPnl').textContent = '$' + totalPnl.toFixed(2);\n                document.getElementById('todayPnl').className = 'pnl-value ' +\n                    (totalPnl > 0 ? 'pnl-positive' : totalPnl < 0 ? 'pnl-negative' : 'pnl-neutral');\n\n                document.getElementById('todayPnlPercent').textContent =\n                    (pnlPercent >= 0 ? '+' : '') + pnlPercent.toFixed(2) + '%';\n                document.getElementById('todayPnlPercent').className = 'pnl-percent ' +\n                    (pnlPercent > 0 ? 'pnl-positive' : pnlPercent < 0 ? 'pnl-negative' : '');\n\n                document.getElementById('realizedPnl').textContent = '$' + (data.realized_pnl || 0).toFixed(2);\n                document.getElementById('unrealizedPnl').textContent = '$' + (data.unrealized_pnl || 0).toFixed(2);\n                document.getElementById('totalTrades').textContent = data.total_trades || 0;\n                document.getElementById('winRate').textContent = (data.win_rate || 0).toFixed(1) + '%';\n                document.getElementById('currentEquity').textContent = '$' + (data.final_capital || 1000).toFixed(2);\n\n                // Update session status indicator\n                sessionRunning = data.is_running || false;\n                const statusText = sessionRunning ? '🟢 LIVE' : (data.session_complete ? '✅ COMPLETE' : '⭕ IDLE');\n                document.querySelector('.header p').innerHTML = 'Real-time Paper Trading Performance | Status: ' + statusText + ' | Source: ' + (data.source || 'default');\n\n                // Update equity chart based on source\n                if (data.source === 'timeseries' && data.timeseries) {\n                    // Use timeseries data for chart\n                    updateChartFromTimeseries(data.timeseries);\n                } else if (data.source === 'summary' && data.timeseries) {\n                    // Session running with timeseries\n                    updateChartFromTimeseries(data.timeseries);\n                } else {\n                    // Single point update\n                    const now = new Date().toLocaleTimeString();\n                    equityHistory.push(data.final_capital || 1000);\n\n                    // Keep only last 50 points\n                    if (equityHistory.length > 50) {\n                        equityHistory.shift();\n                        equityChart.data.labels.shift();\n                    }\n\n                    equityChart.data.labels.push(now);\n                    equityChart.data.datasets[0].data = [...equityHistory];\n                    equityChart.update('none');\n                }\n\n                // Reset error state\n                errorCount = 0;\n                document.getElementById('errorBanner').style.display = 'none';\n\n            } catch (error) {\n                console.error('Error updating P&L:', error);\n                handleError();\n            }\n        }\n\n        // Update chart from timeseries data\n        function updateChartFromTimeseries(timeseries) {\n            if (!timeseries || timeseries.length === 0) return;\n\n            // Clear and rebuild chart data\n            const labels = [];\n            const data = [];\n\n            // Use last 60 points or all if less\n            const points = timeseries.slice(-60);\n\n            points.forEach(point => {\n                const date = new Date(point.ts_ms);\n                labels.push(date.toLocaleTimeString());\n                data.push(point.equity);\n            });\n\n            // Calculate min/max for autoscale with buffer\n            const minValue = Math.min(...data);\n            const maxValue = Math.max(...data);\n            const buffer = (maxValue - minValue) * 0.02 || 10; // 2% buffer or $10 minimum\n\n            // Update chart with autoscaled Y-axis\n            equityChart.options.scales.y.min = minValue - buffer;\n            equityChart.options.scales.y.max = maxValue + buffer;\n\n            equityChart.data.labels = labels;\n            equityChart.data.datasets[0].data = data;\n\n            // Update chart appearance for step-like visualization\n            if (points.length > 10) {\n                equityChart.data.datasets[0].stepped = 'before'; // Step-like line\n                equityChart.data.datasets[0].borderWidth = 2;\n                equityChart.data.datasets[0].pointRadius = 1;\n                equityChart.data.datasets[0].pointHoverRadius = 4;\n            }\n\n            equityChart.update('none');\n\n            // Store for future updates\n            equityHistory = [...data];\n        }\n\n        // Update Live Proof\n        async function updateLiveProof() {\n            try {\n                const response = await fetch('/live-proof?symbol=BTC/USDT');\n                if (!response.ok) throw new Error('Failed to fetch live proof');\n\n                const data = await response.json();\n\n                document.getElementById('liveBid').textContent = '$' + (data.bid || 0).toFixed(2);\n                document.getElementById('liveAsk').textContent = '$' + (data.ask || 0).toFixed(2);\n                document.getElementById('liveLast').textContent = '$' + (data.last || 0).toFixed(2);\n                document.getElementById('exchangeName').textContent = data.exchange || 'Unknown';\n                document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();\n\n            } catch (error) {\n                console.error('Error updating live proof:', error);\n                document.getElementById('liveBid').textContent = '-';\n                document.getElementById('liveAsk').textContent = '-';\n                document.getElementById('liveLast').textContent = '-';\n            }\n        }\n\n        // Update Trades Table\n        async function updateTrades() {\n            try {\n                const response = await fetch('/api/pnl/logs/trades?n=10');\n                if (!response.ok) throw new Error('Failed to fetch trades');\n\n                const data = await response.json();\n                const tbody = document.getElementById('tradesBody');\n\n                if (data.items && data.items.length > 0) {\n                    tbody.innerHTML = '';\n\n                    // Display trades (already sorted by most recent)\n                    data.items.slice(0, 10).forEach(trade => {\n                        const row = tbody.insertRow();\n\n                        // Time\n                        const time = trade.ts_ms ? new Date(trade.ts_ms).toLocaleTimeString() : '-';\n                        row.insertCell(0).textContent = time;\n\n                        // Symbol\n                        row.insertCell(1).textContent = trade.symbol || 'BTC/USDT';\n\n                        // Side\n                        const sideCell = row.insertCell(2);\n                        sideCell.textContent = (trade.side || '-').toUpperCase();\n                        sideCell.className = trade.side === 'buy' ? 'trade-buy' : 'trade-sell';\n\n                        // Quantity\n                        row.insertCell(3).textContent = (trade.qty || 0).toFixed(8);\n\n                        // Price\n                        row.insertCell(4).textContent = '$' + (trade.price || 0).toFixed(2);\n                    });\n\n                    // Update trade count indicator\n                    const tradeCountEl = document.getElementById('totalTrades');\n                    if (tradeCountEl && data.total_trades) {\n                        tradeCountEl.textContent = data.total_trades;\n                    }\n                } else {\n                    tbody.innerHTML = '<tr><td colspan=\"5\" style=\"text-align: center; opacity: 0.5;\">No trades yet</td></tr>';\n                }\n\n            } catch (error) {\n                console.error('Error updating trades:', error);\n                const tbody = document.getElementById('tradesBody');\n                tbody.innerHTML = '<tr><td colspan=\"5\" style=\"text-align: center; opacity: 0.5; color: #ff4444;\">Error loading trades</td></tr>';\n            }\n        }\n\n        // Handle errors\n        function handleError() {\n            errorCount++;\n            if (errorCount > 2) {\n                document.getElementById('errorBanner').style.display = 'block';\n            }\n        }\n\n        // Initial load\n        updatePnlSummary();\n        updateLiveProof();\n        updateTrades();\n\n        // Set up polling (every 5 seconds)\n        setInterval(() => {\n            updatePnlSummary();\n            updateLiveProof();\n            updateTrades();\n        }, 5000);\n    </script>\n</body>\n</html>\n"


@router.get("/dashboard", response_class=HTMLResponse)
async def get_dashboard():
    """Serve the P&L dashboard"""
    return HTMLResponse(content=DASHBOARD_HTML)
