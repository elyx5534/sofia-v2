version: '3.9'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sofia-app
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://sofia:${DB_PASSWORD}@postgres:5432/sofia
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - SENTRY_DSN=${SENTRY_DSN}
      - API_KEY=${API_KEY}
      - API_SECRET=${API_SECRET}
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - sofia-network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8000"
      - "prometheus.io/path=/metrics"

  # Worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sofia-worker
    restart: unless-stopped
    command: celery -A src.workers worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://sofia:${DB_PASSWORD}@postgres:5432/sofia
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - app
      - rabbitmq
    networks:
      - sofia-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sofia-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=sofia
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=sofia
      - POSTGRES_MAX_CONNECTIONS=200
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups/postgres:/backups
    ports:
      - "5432:5432"
    networks:
      - sofia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sofia"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sofia-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - sofia-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: sofia-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - sofia-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sofia-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/sites-enabled
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - sofia-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sofia-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sofia-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sofia-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - sofia-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sofia-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - sofia-network

  # Postgres Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: sofia-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://sofia:${DB_PASSWORD}@postgres:5432/sofia?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - sofia-network

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: sofia-backup
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://sofia:${DB_PASSWORD}@postgres:5432/sofia
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - BACKUP_SCHEDULE="0 */2 * * *"  # Every 2 hours
    volumes:
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
    networks:
      - sofia-network

  # Health Check Service
  healthcheck:
    build:
      context: .
      dockerfile: Dockerfile.healthcheck
    container_name: sofia-healthcheck
    restart: unless-stopped
    environment:
      - HEALTH_CHECK_URL=http://app:8000/health
      - SLACK_WEBHOOK=${SLACK_WEBHOOK}
      - CHECK_INTERVAL=60
    depends_on:
      - app
    networks:
      - sofia-network

networks:
  sofia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:
  nginx-logs: